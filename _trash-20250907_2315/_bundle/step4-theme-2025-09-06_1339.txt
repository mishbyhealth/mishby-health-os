===== src/index.css =====
/* src/index.css */

/* Tailwind layers */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   GloWell Theme Tokens (beige + dark green)
   â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
:root{
  --gw-bg: #f7f2e9;      /* app background (beige) */
  --gw-fg: #102a24;      /* primary text (deep green) */
  --gw-accent: #0b7d69;  /* accent (dark teal/green) */
  --gw-muted: #6b7280;   /* muted text (gray-500) */
  --gw-card: #ffffff;    /* card surface */
  --gw-border: #e5e7eb;  /* border (gray-200) */
}

/* Base (applies site-wide) */
@layer base {
  html, body, #root {
    min-height: 100%;
    min-height: 100vh;
    background: var(--gw-bg);
    color: var(--gw-fg);
  }

  /* Typography tweaks */
  h1,h2,h3,h4 { letter-spacing: -0.01em; }
  a { text-underline-offset: 2px; }

  /* Tables look tidy by default */
  table { border-collapse: collapse; }
  th, td { border-color: var(--gw-border); }
}

/* Components (small helpers) */
@layer components {
  .gw-card {
    @apply rounded-lg border p-4;
    background: var(--gw-card);
    border-color: var(--gw-border);
  }

  .gw-btn {
    @apply rounded border px-3 py-1 text-sm hover:bg-gray-50;
    border-color: var(--gw-border);
  }

  .gw-link-active {
    color: var(--gw-accent);
    @apply font-medium;
  }
}

/* Utilities (optional minor polish) */
@layer utilities {
  .gw-muted { color: var(--gw-muted); }
}

/* Print: clean A4 style */
@media print {
  @page { size: A4; margin: 12mm; }
  body { background: #fff !important; color: #111 !important; }
  header, footer, nav { display: none !important; }
  .no-print { display: none !important; }
}


===== src/utils/theme.ts =====
// src/utils/theme.ts
// Single source of truth for theme + owner lock
export type Theme =
  | "classic"
  | "mint"
  | "sky"
  | "lavender"
  | "sunset"
  | "forest"
  | "slate";

export const THEMES: Theme[] = [
  "classic",
  "mint",
  "sky",
  "lavender",
  "sunset",
  "forest",
  "slate",
];

const THEME_KEY = "glowell:theme";
const LOCK_KEY = "glowell:lock";

/** Read persisted theme; fallback classic */
export function loadTheme(): Theme {
  try {
    const t = localStorage.getItem(THEME_KEY) as Theme | null;
    if (t && THEMES.includes(t)) return t;
  } catch {}
  return "classic";
}

export function saveTheme(t: Theme) {
  try {
    localStorage.setItem(THEME_KEY, t);
  } catch {}
}

/** Apply theme by setting [data-theme] on <html> */
export function applyTheme(t: Theme) {
  const root = document.documentElement;
  root.setAttribute("data-theme", t);
}

/** Next theme name in the cycle */
export function nextTheme(t: Theme): Theme {
  const i = THEMES.indexOf(t);
  const j = (i < 0 ? 0 : i + 1) % THEMES.length;
  return THEMES[j];
}

/** Environment default for lock (Vite) */
function envLockDefault(): boolean {
  try {
    const v = (import.meta as any)?.env?.VITE_GLOWWELL_LOCK;
    return v === "1" || v === "true";
  } catch {
    return false;
  }
}

/** Load lock: localStorage wins; else env default */
export function loadLock(): boolean {
  try {
    const v = localStorage.getItem(LOCK_KEY);
    if (v === "1" || v === "true") return true;
    if (v === "0" || v === "false") return false;
  } catch {}
  return envLockDefault();
}

/** Persist + apply lock flag to <html data-locked="0|1"> */
export function saveLock(locked: boolean) {
  try {
    localStorage.setItem(LOCK_KEY, locked ? "1" : "0");
  } catch {}
  const root = document.documentElement;
  root.setAttribute("data-locked", locked ? "1" : "0");
}

/** Boot helper: apply both theme & lock once */
export function bootThemeAndLock() {
  const t = loadTheme();
  applyTheme(t);
  const locked = loadLock();
  document.documentElement.setAttribute("data-locked", locked ? "1" : "0");
}


===== src/components/ThemeSwitch.tsx =====
// src/components/ThemeSwitch.tsx
import { useEffect, useState } from "react";
import {
  THEMES,
  loadTheme,
  saveTheme,
  applyTheme,
  nextTheme,
  loadLock,
  saveLock,
  type Theme,
} from "@/utils/theme";

export default function ThemeSwitch() {
  const [theme, setTheme] = useState<Theme>("classic");
  const [locked, setLocked] = useState<boolean>(false);

  useEffect(() => {
    // Initialize from storage/env
    const t = loadTheme();
    setTheme(t);
    applyTheme(t);
    const lk = loadLock();
    setLocked(lk);
    document.documentElement.setAttribute("data-locked", lk ? "1" : "0");
  }, []);

  function onCycleTheme() {
    const nxt = nextTheme(theme);
    setTheme(nxt);
    saveTheme(nxt);
    applyTheme(nxt);
  }

  function onToggleLock() {
    const nxt = !locked;
    setLocked(nxt);
    saveLock(nxt);
  }

  return (
    <div className="flex items-center gap-2">
      <button
        type="button"
        onClick={onCycleTheme}
        className="px-3 py-1 rounded-full border text-sm"
        title="Cycle theme"
      >
        Theme: {capitalize(theme)}
      </button>
      <button
        type="button"
        onClick={onToggleLock}
        className="px-3 py-1 rounded-full border text-sm"
        title="Toggle read-only lock"
      >
        {locked ? "ðŸ”’ Locked" : "ðŸ”“ Unlocked"}
      </button>
    </div>
  );
}

function capitalize(s: string) {
  return s.charAt(0).toUpperCase() + s.slice(1);
}

